services:
  # Open Web UI service
  master_ai_operator:
    image: ghcr.io/open-webui/open-webui:latest
    container_name: open_webui
    restart: unless-stopped
    environment:
      WEBUI_NAME: ${WEBUI_NAME:-SMILe}
      ENABLE_WEBSOCKET_SUPPORT: ${ENABLE_WEBSOCKET_SUPPORT:-false}
    ports:
      - "${OPEN_WEBUI_PORT:-3000}:8080"
    volumes:
      - mnt:/app/backend/data  # Use simple mount
    networks:
      - app_network

  # Postgres service
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-adminpass}
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Use dedicated volume for PostgreSQL
    networks:
      - app_network

  # n8n service with OpenTelemetry instrumentation
  n8n:
    build:
      context: .
      dockerfile: dockerfile
    container_name: n8n
    restart: unless-stopped
    environment:
      # Database Configuration - CONNECTS TO EXISTING POSTGRES SERVICE
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres              # Uses the existing 'postgres' service above
      DB_POSTGRESDB_PORT: 5432                  # Internal port of postgres service
      DB_POSTGRESDB_USER: ${DB_POSTGRESDB_USER:-admin}
      DB_POSTGRESDB_PASSWORD: ${DB_POSTGRESDB_PASSWORD:-adminpass}
      DB_POSTGRESDB_DATABASE: ${DB_POSTGRESDB_DATABASE:-n8n}  # Creates 'n8n' database in existing PostgreSQL
      # N8N Configuration
      N8N_PATH: ${N8N_PATH:-/}
      N8N_METRICS: ${N8N_METRICS:-true}
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:5678/}
      WEBHOOK_TUNNEL_URL: ${WEBHOOK_TUNNEL_URL:-http://localhost:5678/}
      # OpenTelemetry Configuration
      OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME:-n8n}
      OTEL_EXPORTER_OTLP_PROTOCOL: ${OTEL_EXPORTER_OTLP_PROTOCOL:-http/protobuf}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://insights.delcaper.com:4318}
      OTEL_LOG_LEVEL: ${OTEL_LOG_LEVEL:-info}
    ports:
      - "${N8N_PORT:-5678}:5678"
    volumes:
      - n8n_data:/home/node/.n8n  # N8N app data (workflows, etc.) - DB data stored in postgres_data volume
    depends_on:
      - postgres
    networks:
      - app_network

  # Qdrant service
  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    restart: unless-stopped
    ports:
      - "${QDRANT_PORT:-6333}:6333"
    environment:
      QDRANT_API_KEY: ${QDRANT_API_KEY:-difyai123456}
    volumes:
      - mnt:/qdrant/storage  # Use simple mount
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  mnt:
    external: true  # Shared volume for Open WebUI and Qdrant data
  postgres_data:
    driver: local  # PostgreSQL database files (shared by all services using PostgreSQL)
  n8n_data:
    driver: local  # N8N application data (workflows, credentials, settings) - NOT database data
