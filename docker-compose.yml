services:
  # Open Web UI service
  master_ai_operator:
    image: ghcr.io/open-webui/open-webui:latest
    container_name: open_webui
    restart: unless-stopped
    environment:
      WEBUI_NAME: ${WEBUI_NAME:-Prayog}
      ENABLE_WEBSOCKET_SUPPORT: ${ENABLE_WEBSOCKET_SUPPORT:-false}
      OLLAMA_API_BASE_URL: ${OLLAMA_API_BASE_URL:-http://host.docker.internal:11434}
      OLLAMA_BASE_URLS: ${OLLAMA_BASE_URLS:-}
      # Pipeline API Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY:-0p3n-w3bu!}
      OPENAI_API_BASE_URL: ${OPENAI_API_BASE_URL:-http://host.docker.internal:9099}
      LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY:-}
      LANGFUSE_SECRET_KEY: ${LANGFUSE_SECRET_KEY:-}
      LANGFUSE_HOST: ${LANGFUSE_HOST:-http://langfuse:3000}
      #OTEL Configuration
      ENABLE_OTEL: ${ENABLE_OTEL:-true}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://grafana_monitoring:4317}
      OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME:-open-webui}
    ports:
      - "${OPEN_WEBUI_PORT:-3000}:8080"
    volumes:
      - open_webui_data:/app/backend/data  # Use dedicated volume for Open WebUI
    networks:
      - app_network

  # Postgres service
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-adminpass}
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Use dedicated volume for PostgreSQL
    networks:
      - app_network

  # n8n service with OpenTelemetry instrumentation
  n8n:
    build:
      context: .
      dockerfile: dockerfile
    container_name: n8n
    restart: unless-stopped
    command: ["start"]
    environment:
      # Database Configuration - CONNECTS TO EXISTING POSTGRES SERVICE
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres              # Uses the existing 'postgres' service above
      DB_POSTGRESDB_PORT: 5432                  # Internal port of postgres service
      DB_POSTGRESDB_USER: ${DB_POSTGRESDB_USER:-admin}
      DB_POSTGRESDB_PASSWORD: ${DB_POSTGRESDB_PASSWORD:-adminpass}
      DB_POSTGRESDB_DATABASE: ${DB_POSTGRESDB_DATABASE:-n8n}  # Creates 'n8n' database in existing PostgreSQL
      # N8N Configuration
      N8N_PATH: ${N8N_PATH:-/}
      N8N_HOST: ${N8N_HOST:-0.0.0.0}
      N8N_PORT: ${N8N_PORT:-5678}
      N8N_METRICS: ${N8N_METRICS:-true}
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:5678/}
      WEBHOOK_TUNNEL_URL: ${WEBHOOK_TUNNEL_URL:-http://localhost:5678/}
      N8N_SECURE_COOKIE: ${N8N_SECURE_COOKIE:-false}
      # OpenTelemetry Configuration
      OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME:-n8n}
      OTEL_EXPORTER_OTLP_PROTOCOL: ${OTEL_EXPORTER_OTLP_PROTOCOL:-http/protobuf}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://insights.delcaper.com:4318}
      OTEL_LOG_LEVEL: ${OTEL_LOG_LEVEL:-info}
    ports:
      - "${N8N_PORT:-5678}:5678"
    volumes:
      - n8n_data:/home/node/.n8n  # N8N app data (workflows, etc.) - DB data stored in postgres_data volume
    depends_on:
      - postgres
    networks:
      - app_network

  # Qdrant service
  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    restart: unless-stopped
    ports:
      - "${QDRANT_PORT:-6333}:6333"
    environment:
      QDRANT_API_KEY: ${QDRANT_API_KEY:-difyai123456}
    volumes:
      - qdrant_data:/qdrant/storage  # Use dedicated volume for Qdrant
    networks:
      - app_network

  # Grafana monitoring service for N8N and all services
  grafana:
    image: grafana/otel-lgtm:latest
    container_name: grafana_monitoring
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-4000}:3000"   # Grafana UI (changed from 3000 to avoid conflict)
      - "${GRAFANA_OTLP_PORT:-4317}:4317"   # OTLP/gRPC
      - "${GRAFANA_OTLP_HTTP_PORT:-4318}:4318"   # OTLP/HTTP
    environment:
      # Grafana configuration
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-Prayog@123}
      GF_USERS_ALLOW_SIGN_UP: false
    networks:
      - app_network

  # OpenWebUI Pipelines service
  pipelines:
    image: ghcr.io/open-webui/pipelines:main
    container_name: openwebui_pipelines
    restart: unless-stopped
    environment:
      # Optional: Pre-load specific pipelines
      PIPELINES_URLS: ${PIPELINES_URLS:-}
      # Optional: Change pipelines directory
      PIPELINES_DIR: ${PIPELINES_DIR:-/app/pipelines}
      # API Configuration
      API_KEY: ${PIPELINES_API_KEY:-0p3n-w3bu!}
    ports:
      - "${PIPELINES_PORT:-9099}:9099"
    volumes:
      - pipelines_data:/app/pipelines  # Pipeline configurations and custom code
    networks:
      - app_network
    extra_hosts:
      - host.docker.internal:host-gateway

  # Langfuse service for LLM observability and analytics
  langfuse:
    image: langfuse/langfuse:2
    container_name: langfuse
    restart: unless-stopped
    environment:
      # Database Configuration (uses same PostgreSQL instance)
      DATABASE_URL: postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-adminpass}@postgres:5432/${LANGFUSE_DB:-langfuse}
      # Langfuse Configuration
      NEXTAUTH_URL: ${LANGFUSE_URL:-http://localhost:3001}
      NEXTAUTH_SECRET: ${LANGFUSE_SECRET:-langfuse-secret-key-change-in-production}
      SALT: ${LANGFUSE_SALT:-langfuse-salt-change-in-production}
      # Disable ClickHouse requirement (use PostgreSQL only)
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: ${LANGFUSE_EXPERIMENTAL:-false}
      # Telemetry settings
      TELEMETRY_ENABLED: ${LANGFUSE_TELEMETRY:-true}
    ports:
      - "${LANGFUSE_PORT:-3001}:3000"
    depends_on:
      - postgres
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  open_webui_data:
    driver: local  # Open WebUI backend data
  postgres_data:
    driver: local  # PostgreSQL database files
  n8n_data:
    driver: local  # N8N application data (workflows, credentials, settings)
  qdrant_data:
    driver: local  # Qdrant vector database storage
  pipelines_data:
    driver: local  # OpenWebUI Pipelines data (pipeline configurations and custom code)
